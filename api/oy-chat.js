// api/oy-chat.js
export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Use POST' });
    }

    const key = process.env.OPENAI_API_KEY;
    if (!key) return res.status(500).json({ error: 'No OPENAI_API_KEY' });

    // –ö–ª–∏–µ–Ω—Ç—ç—ç—Å –∏—Ä—ç—Ö ”©–≥”©–≥
    const { message = '', chatSlug = '', history = [] } = req.body || {};

    // –°“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂–∏–π–≥ —Ü—ç–≤—ç—Ä —Ç–µ–∫—Å—Ç –±–æ–ª–≥–æ–Ω–æ
    const last = (history || []).slice(-10).map(m => ({
      role: m.who === 'user' ? 'user' : 'assistant',
      content: String(m.html || '').replace(/<[^>]+>/g, '')
    }));

    const system = [
      '–¢–∞ "–û—é—É–Ω—Å–∞–Ω–∞–∞" –Ω—ç—Ä—Ç—ç–π —ç–µ–ª–¥—ç–≥, –∞—é—É–ª–≥“Ø–π –∑”©–≤–ª”©–≥”©”© ”©–≥–¥”©–≥ —Ç—É—Å–ª–∞—Ö.',
      `–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞–Ω–≥–∏–ª–∞–ª: ${chatSlug || '—Å–æ–Ω–≥–æ–æ–≥“Ø–π'}.`,
      '–¢–æ–≤—á, –æ–π–ª–≥–æ–º–∂—Ç–æ–π, –º–æ–Ω–≥–æ–ª–æ–æ—Ä —Ö–∞—Ä–∏—É–ª.'
    ].join(' ');

    // OpenAI Chat Completions –¥—É—É–¥–∞—Ö
    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${key}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        temperature: 0.3,
        messages: [
          { role: 'system', content: system },
          ...last,
          { role: 'user', content: String(message) }
        ]
      })
    });

    if (!r.ok) {
      const txt = await r.text();
      return res.status(r.status).json({ error: txt });
      // –ñ–∏—á: Vercel Logs –¥—ç—ç—Ä –∞–ª–¥–∞–∞–≥ —Ö–∞—Ä–∞—Ö–∞–¥ –∞–º–∞—Ä
    }

    const data = await r.json();
    const reply = (data?.choices?.[0]?.message?.content || '–û–π–ª–≥–æ–ª–æ–æ. üåø').trim();
    return res.json({ reply });
  } catch (e) {
    return res.status(500).json({ error: String(e) });
  }
}
