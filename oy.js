// oy.js - —ç—Ö—ç–Ω–¥ –ó”®–í–•”®–ù —ç–Ω–∏–π–≥ –±–∏—á:
(()=> {
  if (window.__OY_BOOTED__) return; 
  window.__OY_BOOTED__ = true;
  
  // –±—É—Å–∞–¥ –∫–æ–¥...
})();
  try {
    const { model = 'gpt-4o-mini', msg = '', chatSlug = '', history = [] } = req.body || {};
    
    console.log(`üî• API Request - Model: ${model}, Chat: ${chatSlug}, Message: ${msg.substring(0, 50)}...`);
    
    // Model –Ω—ç—Ä —à–∞–ª–≥–∞–∞–¥ –∑–∞—Å–≤–∞—Ä–ª–∞—Ö
    const validModels = {
      'gpt-3.5-turbo': 'gpt-3.5-turbo',
      'gpt-4': 'gpt-4-turbo',           // ‚ùå gpt-4 ‚Üí ‚úÖ gpt-4-turbo
      'gpt-4-turbo': 'gpt-4-turbo',
      'gpt-4o': 'gpt-4o',
      'gpt-4o-mini': 'gpt-4o-mini',
      'gpt-4-mini': 'gpt-4o-mini'       // ‚ùå gpt-4-mini ‚Üí ‚úÖ gpt-4o-mini
    };
    
    const selectedModel = validModels[model] || 'gpt-4o-mini';
    
    if (selectedModel !== model) {
      console.log(`üîß Model –∑–∞—Å–≤–∞—Ä–ª–∞–≤: ${model} ‚Üí ${selectedModel}`);
    }

    // History –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö (–∑”©–≤—Ö”©–Ω —Å“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂ –∞–≤–∞—Ö)
    const processedHistory = (history || [])
      .filter(item => item && (item.text || item.html || item.content))
      .map(item => ({
        role: item.who === 'user' ? 'user' : 'assistant',
        content: item.text || item.html || item.content || ''
      }))
      .slice(-10); // –ó”©–≤—Ö”©–Ω —Å“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂

    console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è: ${processedHistory.length} –º–µ—Å—Å–µ–∂`);

// API –¥—É—É–¥–ª–∞–≥–∞
const response = await fetch('/api/oy-chat', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    model: selectedModel,
    msg: userMessage,
    chatSlug: currentChat,
    history: chatHistory
  })
});    console.log(`üìä OpenAI Response Status: ${response.status}`);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API Error:', data);
      
      // –¢–æ–¥–æ—Ä—Ö–æ–π –∞–ª–¥–∞–∞–Ω—ã –º–µ—Å—Å–µ–∂
      let errorMessage = 'OpenAI API –∞–ª–¥–∞–∞';
      
      if (data?.error?.code === 'invalid_api_key') {
        errorMessage = 'API key –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö“Ø—á–∏–Ω—Ç—ç–π –±—É—Å –±–∞–π–Ω–∞';
      } else if (data?.error?.code === 'insufficient_quota') {
        errorMessage = 'API quota –¥—É—É—Å—Å–∞–Ω - https://platform.openai.com/account/billing —à–∞–ª–≥–∞–Ω–∞ —É—É';
      } else if (data?.error?.code === 'model_not_found') {
        errorMessage = `"${selectedModel}" –º–æ–¥–µ–ª—å –æ–ª–¥—Å–æ–Ω–≥“Ø–π`;
      } else if (data?.error?.message) {
        errorMessage = data.error.message;
      }
      
      return res.status(500).json({ error: errorMessage });
    }

    const reply = data.choices?.[0]?.message?.content?.trim() || '–•–∞—Ä–∏—É –æ–ª–¥—Å–æ–Ω–≥“Ø–π.';
    
    console.log(`‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª–∞–≤: ${reply.substring(0, 100)}...`);
    
    return res.status(200).json({ reply });

  } catch (error) {
    console.error('‚ùå Server Error:', error);
    return res.status(500).json({ 
      error: error.message || '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' 
    });
  }
}
